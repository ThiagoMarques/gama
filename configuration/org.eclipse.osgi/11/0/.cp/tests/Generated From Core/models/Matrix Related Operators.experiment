/**
 *  Matrix Related Operators
 *  Author: GAMA Automatic Generator
 *  Description: Unit tests of operators belonging to "Matrix Related Operators".
 */

experiment "Run Tests" type: test {	

	
		test "append_horizontally" {
			matrix var0 <- matrix([[1.0,2.0],[3.0,4.0]]) append_horizontally matrix([[1,2],[3,4]]); 	// var0 equals matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]])
			assert var0 = matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]]); 
			matrix var1 <- matrix([[1.0,2.0],[3.0,4.0]]) append_horizontally matrix([[1,2],[3,4]]); 	// var1 equals matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]])
			assert var1 = matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]]); 

		}
	
		test "append_vertically" {
			matrix var0 <- matrix([[1,2],[3,4]]) append_vertically matrix([[1,2],[3,4]]); 	// var0 equals matrix([[1,2,1,2],[3,4,3,4]])
			assert var0 = matrix([[1,2,1,2],[3,4,3,4]]); 
			matrix var1 <- matrix([[1,2],[3,4]]) append_vertically matrix([[1,2],[3,4]]); 	// var1 equals matrix([[1,2,1,2],[3,4,3,4]])
			assert var1 = matrix([[1,2,1,2],[3,4,3,4]]); 

		}
	
		test "column_at" {
			list<unknown> var0 <- matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]) column_at 2; 	// var0 equals ["el31","el32","el33"]
			assert var0 = ["el31","el32","el33"]; 

		}
	
		test "columns_list" {
			list<list<unknown>> var0 <- columns_list(matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]])); 	// var0 equals [["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]
			assert var0 = [["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]; 

		}
	
		test "determinant" {
			float var0 <- determinant(matrix([[1,2],[3,4]])); 	// var0 equals -2
			assert var0 = -2; 

		}
	
		test "eigenvalues" {
			list<float> var0 <- eigenvalues(matrix([[5,-3],[6,-4]])); 	// var0 equals [2.0000000000000004,-0.9999999999999998]
			assert var0 = [2.0000000000000004,-0.9999999999999998]; 

		}
	
		test "index_of" {
			point var1 <- matrix([[1,2,3],[4,5,6]]) index_of 4; 	// var1 equals {1.0,0.0}
			assert var1 = {1.0,0.0}; 
			int var2 <-  "abcabcabc" index_of "ca"; 	// var2 equals 2
			assert var2 = 2; 
			int var3 <- [1,2,3,4,5,6] index_of 4; 	// var3 equals 3
			assert var3 = 3; 
			int var4 <- [4,2,3,4,5,4] index_of 4; 	// var4 equals 0
			assert var4 = 0; 
			unknown var0 <- [1::2, 3::4, 5::6] index_of 4; 	// var0 equals 3
			assert var0 = 3; 

		}
	
		test "inverse" {
			matrix<float> var0 <- inverse(matrix([[4,3],[3,2]])); 	// var0 equals matrix([[-2.0,3.0],[3.0,-4.0]])
			assert var0 = matrix([[-2.0,3.0],[3.0,-4.0]]); 

		}
	
		test "last_index_of" {
			int var0 <- [1,2,3,4,5,6] last_index_of 4; 	// var0 equals 3
			assert var0 = 3; 
			int var1 <- [4,2,3,4,5,4] last_index_of 4; 	// var1 equals 5
			assert var1 = 5; 
			point var2 <- matrix([[1,2,3],[4,5,4]]) last_index_of 4; 	// var2 equals {1.0,2.0}
			assert var2 = {1.0,2.0}; 
			unknown var3 <- [1::2, 3::4, 5::4] last_index_of 4; 	// var3 equals 5
			assert var3 = 5; 
			int var4 <- "abcabcabc" last_index_of "ca"; 	// var4 equals 5
			assert var4 = 5; 

		}
	
		test "PointAcces" {
			//unknown var0 <- agent1.location; 	// var0 equals the location of the agent agent1
			matrix var1 <- matrix([[1,1],[1,2]]) . matrix([[1,1],[1,2]]); 	// var1 equals matrix([[2,3],[3,5]])
			assert var1 = matrix([[2,3],[3,5]]); 

		}
	
		test "row_at" {
			list<unknown> var0 <- matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]) row_at 2; 	// var0 equals ["el13","el23","el33"]
			assert var0 = ["el13","el23","el33"]; 

		}
	
		test "rows_list" {
			list<list<unknown>> var0 <- rows_list(matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]])); 	// var0 equals [["el11","el21","el31"],["el12","el22","el32"],["el13","el23","el33"]]
			assert var0 = [["el11","el21","el31"],["el12","el22","el32"],["el13","el23","el33"]]; 

		}
	
		test "trace" {
			float var0 <- trace(matrix([[1,2],[3,4]])); 	// var0 equals 5
			assert var0 = 5; 

		}
	
		test "transpose" {
			matrix var0 <- transpose(matrix([[5,-3],[6,-4]])); 	// var0 equals matrix([[5,6],[-3,-4]])
			assert var0 = matrix([[5,6],[-3,-4]]); 

		}
	
}

	